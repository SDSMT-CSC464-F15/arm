% New templete!
% !TEX root = DesignDocument.tex


\chapter{User Documentation}

%%This section should contain the basis for any end user documentation for the system. End user documentation would cover the basic steps for setup and use of the system. It is likely that the majority of this section would be present in its own document to be delivered to the end user.  However, it is recommended the original is contained and maintained in this document. 

%\newpage   %% 
%%  The user guide can be an external document which is included here if necessary ...
%%  a single source is the way to go.

This chapter holds the basis for running the cluster and how to perform some of the commands and tests explained elsewhere in this document.

\section{Cluster User Guide}

%%The source for the user guide can go here.    You have some options for how to handle the user docs.  If you have some {\tt newpage} commands around the guide then you can just print out those pages.   If a different formatting is required, then have the source in a separate file {\tt userguide.tex} and include that file here.  That file can also be included into a driver (like the senior design template) which has the client specified formatting.  Again, this is a single source approach.   
\subsection{Turning on the Cluster}
The cluster needs to follow these steps for start up successfully:
\begin{enumerate}
	\item Make sure the two flip-switches are turned off.
	\item Plug in the cluster to power. This will start up Snow White, the power box, and the switch.
	\item Once Snow White has fully been powered up, the two switches at the top can be switched on. Each switch coresponds to the column of ODROIDs they are on and they will power up the remaining ODROIDs.
\end{enumerate}
This order is need in order for Snow White's home directory to successfully mount on the other ODROIDs.

\subsection{Shutting Down the Cluster}
To safely shut down the cluster, use the python script killDwarfs located in Snow White's bin directory. The script will SSH to each dwarf in sequence and issue the command
\begin{lstlisting}
> sudo shutdown now
\end{lstlisting}

The output will show messages that Snow White failed to connect to each dwarf. This means that the script was successful and powered off the device, breaking the SSH connection. Once the script returns for the final dwarf, wait until all the fans of the ODROIDs stop spinning and flip the flip-switches to off.

\subsection{Benchmarking the Switch}
With two ODROID devices attached to the switch via direct ethernet, the connection speed can be tested. This is done by one device running:
\begin{lstlisting}
> iperf -s
\end{lstlisting}
and the other running:
\begin{lstlisting}
> iperf -c [IP of the first device]
\end{lstlisting}
This will print out the connection speed of the switch.

\subsection{Mounting the Home Directory}
For many tests on the cluster, the home directory of Snow White must be mounted on the other devices. This is done with the following command:
\begin{lstlisting}
192.168.0.1:/home /home nfs auto 0 0
\end{lstlisting}
Where 192.168.0.1 is the IP address of Snow White.

\subsection{Assigning Hostnames}
The ODROIDs on the cluster needed to be renamed. This is done with an example of changing the name from ``odroid'' to ``dopey'':
\begin{lstlisting}
> sudo vim /etc/hostname
\end{lstlisting}
In that text file, it should look like:
\begin{lstlisting}
odroid
\end{lstlisting}
Overwrite ``odroid'' with the new hostname. In this example, dopey.
\begin{lstlisting}
dopey
\end{lstlisting}
And then go to the hosts file, change the hostname in there. To get into the hosts file:
\begin{lstlisting}
> sudo vim /etc/hosts
\end{lstlisting}
And then replace this line:
\begin{lstlisting}
127.0.0.1 odroid
\end{lstlisting} 
with this:
\begin{lstlisting}
127.0.0.1 dopey
\end{lstlisting}
The IP address 127.0.0.1 is the address of the local host. Then in the config file:
\begin{lstlisting}
> sudo vim /etc/nsswitch.conf
\end{lstlisting}
Change this line from:
\begin{lstlisting}
hosts: files mdns4_minimal [NOTFOUND=return] dns
\end{lstlisting}
to this line:
\begin{lstlisting}
hosts: files dns
\end{lstlisting}
Check to see if the hostname has successfully changed:
\begin{lstlisting}
> hostname
\end{lstlisting}
It should print the new hostname, dopey. If it doesn't, restart the ODROID and again try the hostname command.

\subsection{Getting Internet on the ODROIDs}
If and Internet connection is required on Snow White or any of the dwarfs for tasks such as installing packages, a few steps will have to be taken to disable the networking done to allow the cluster's internal network to exists. First, edit the content of the /etc/networking/interfaces file from
\begin{lstlisting}
auto eth0
iface eth0 inet static
	address 192.168.N.1
	netmask 255.255.0.0
	gateway 192.168.0.1
\end{lstlisting}

to 

\begin{lstlisting}
# auto eth0
# iface eth0 inet static
#	address 192.168.N.1
#	netmask 255.255.0.0
#	gateway 192.168.0.1
\end{lstlisting}

and restart the ODROID. Then plug in the Ethernet cable with internet access. This will allow the default networking settings to be used, and the device will be able to connect to the internet as normal. When you want the device to go back to using the internal network of the cluster, undo the changes to the file and restart again.

\subsection{SSH Via Hostname}
After the ODROIDs have been renamed, it's essential to be able to access each of them by their new names. To do this, we have to add a list of the ODROIDs' host names and their IP addresses into each ODROID. These can be added to the hosts file of the ODROID:
\begin{lstlisting}
> sudo vim /etc/hosts
\end{lstlisting}
In that file, add the other's IP addresses and hostnames in this format: \\
<ipaddress> <hostname> \\
Exampe: 192.168.1.11 snow\textunderscore white \\ \\
 
\subsection{Taking Down the Passwords}
In order to perform MPI programs throughout the cluster, the passwords from each of the ODROIDs need to be taken down so the user doesn't need them when ssh-ing into them. To do this, generate an ssh key:
\begin{lstlisting}
> ssh-kegen
\end{lstlisting}
Enter through all of the prompts, then:
\begin{lstlisting}
> ssh-copy-id <ipaddress>
\end{lstlisting}

\subsection{USB to USB Communication??}

Direct USB 3.0 to USB 3.0 connection is not supported at this time. The current operating system on the devices cannot communicate in such a way, and neither can any other modern operated system in widespread use. 

\subsection{GPIO Communication}
Part of this project involved communication through GPIO. This example shows how to pass data through a single pin from one ODROID to the other. \\ \\
Taking Doc and Happy, connect index pin 8 (UART TXD) (Export Pin 172) on Doc to index pin 6 (UART RXD) (Export Pin 171) on Happy. \\ \\
In Happy, mount the export pin. This makes the directory gpio171. Go in there and change the file direction to recieve the data.
\begin{lstlisting}
> cd /sys/class/gpio
> echo 171 > export
> cd gpio171
>echo in > direction
\end{lstlisting}
In Doc, mount the export pin. Again, this makes a directory to that pin. Go in there and changed the file direction to send out the data.
\begin{lstlisting}
> cd /sys/class/gpio 
> echo 172 > export 
> cd gpio172 
> echo out > direction
\end{lstlisting}
Then in Doc, change the value (0 or 1) to send out. Here, it sends out 1.
\begin{lstlisting}
> cd /ss/class/gpio/gpio172
> echo 1 > value
\end{lstlisting}
In Happy, check to see if the value was submitted.
\begin{lstlisting}
> cd /sys/class/gpio/gpio171
> echo value
\end{lstlisting}
It'll print 1, the value that Doc sent to Happy.

\subsection{Unmounting a GPIO Pin}
After mounting and communication through the pins in one of the dwarfs, the pin need to be unmounted. To unmount the GPIO Export Pin:
\begin{lstlisting}
> cd /sys/class/gpio
> echo [GPIO Export Pin] > unexport
\end{lstlisting}

\subsection{Creating Routing Tables}
Each device should have the /etc/network/interfaces file such as: \\
\begin{lstlisting}
auto eth0
iface eth0 inet static
	address 192.168.N.1
	netmask 255.255.0.0
	gateway 192.168.0.1
auto eth1
iface eth1 inet static 
	address 192.168.N.2
	netmask 255.0.0
	gateway 192.168.0.1
\end{lstlisting}
where eth0 is the Ethernet port, and eth1 is the USB to Ethernet port, and N is the number of the device (0 - 7). With that configured, the Ethernet port of device N should be connected to the USB to Ethernet port of device N + 1 (i.e. snow white to dopey, dopey to sleepy, etc). The USB to Ethernet port of each device is then connected to the Ethernet port of the device behind it. \\ \\
Once that is set up, each device needs to run the following two commands:
\begin{lstlisting}
> sudo route add -host 192.168.N+1.1 gw 192.168.N.2
> sudo route add -host 192.168.N-1.2 gw 192.168.N.1
\end{lstlisting}
where N is the number of the device. This will allow each device to ping the devices next to it. 
\begin{lstlisting}
> sudo route add -host 192.168.N-2.2 gw 192.168.N.1
\end{lstlisting}
should let the device then be able to ping the one that's two behind it. 

\section{Programmer Manual}
These manual are not specific to the cluster, but were needed for the project and are useful to the programmer.
\subsection{Formatting Executable Commands}
Some of the tools created were formatted as executable commands. This was done by adding one of these two lines at the top of the program:
\begin{lstlisting}
#!/bin/bash
\end{lstlisting}
\begin{lstlisting}
#!/bin/usr/python
\end{lstlisting}
And the run this command:
\begin{lstlisting}
> chmod +x <filename>
\end{lstlisting}

\subsection{Build a Debian Package}

For ease of installing LINPACK on the seven dwarfs, it is recommended to create a Debian package on Snow White that can be easily installed on any ARM machine. To do this, build LINPACK as normal, and install the packages build-essentials, devscripts and debhelper with

\begin{lstlisting}
> sudo apt-get install build-essentials
> sudo apt-get install devscripts
> sudo apt-get install debhelper
\end{lstlisting}

Then, follow the steps located on the Debian wiki page Intro to Debian Packaging to create the necessary configuration files and follow the outlined naming convention. When that is done, run

\begin{lstlisting}
> debuild -us -uc
\end{lstlisting}

and the final .deb package will be created. It can be copied to the other dwarfs and installed with

\begin{lstlisting}
> sudo dpkg -i *.deb
\end{lstlisting}

\subsection{Updating the Kernel}
To update the kernel of one of the ODROIDs, first the user needs to have connection to the internet. Then check the current kernel, update its repositories, then follow through and update the kernel:
\begin{lstlisting}
> uname -a
> sudo apt-get update
> apt-get upgrade linux-image-xu3
\end{lstlisting}
A purple screen asking if the user knows what they're doing and want to continue will appear. Continue and ignore all other warning errors. It will take some time to complete the update. Once complete, check the currrent kernel to see if it sucessully update, then upgrade all of the packages for the kernel:
%reference the purple screen here?
\begin{lstlisting}
> uname -a
> sudo apt-get update && sudo apt-get dist upgrade
\end{lstlisting}

\subsection{Monitor Core Use}

To ensure that the benchmarks on running with the maximum capacity of the system, install the package htop on Snow White, and any dwarf of interest using the command
\begin{lstlisting}
> sudo apt-get install htop
\end{lstlisting}
Once that is installed, run it from a terminal with the command
\begin{lstlisting}
> htop
\end{lstlisting}
It will use the terminal window to visually display the detected cores in the system, how much each core is being used, how much memory is in use, and a list of all running processes. This information can be used to verify how many cores are being used by MPI when running the benchmarks, and how much memory is being used. 
